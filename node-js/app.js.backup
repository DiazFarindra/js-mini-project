const express = require('express')
const morgan = require('morgan')
const mongoose = require('mongoose')

// models
const Blog = require('./models/blog')

// express app
const app = express()
const port = 3000

// database (mongodb)
const db = 'mongodb+srv://diazfarindra:kronos@cluster0.w5ofduv.mongodb.net/nodetest?retryWrites=true&w=majority'

mongoose.connect(db, { useNewUrlParser: true, useUnifiedTopology: true })
    .then((result) => app.listen(port))
    .catch((err) => console.log(err))

// register view engine
app.set('view engine', 'ejs')

// middleware and static files
app.use(express.static('public'))
app.use(express.json())
app.use(express.urlencoded({ extended: true }))
app.use(morgan('dev'))

// mongoose and mongo sandbox routes
// app.get('/add-blog', (req, res) => {
//     const blog = new Blog({
//         title: 'test',
//         snippet: 'test',
//         body: 'test'
//     })

//     blog.save()
//         .then((result) => {
//             res.send(result)
//         })
//         .catch((err) => { console.log(err) })
// })

// app.get('/all-blogs', async (req, res) => {
//     try {
//         const data = await Blog.find()
//         res.send(data)
//     } catch (error) {
//         console.log(error)
//     }
// })

// app.get('/single-blog', async (req, res) => {
//     const data = await Blog.findById('6299d64a42ce3a95b8dc8580')
//     res.send(data)
// })

app.get('/', (req, res) => {
    res.redirect('/blogs')
})

app.get('/about', (req, res) => {
    // res.end('hello world!')
    res.render('about', {
        title: 'about',
    })
})

// blogs routes
app.get('/blogs', async (req, res) => {
    const data = await Blog.find().sort({ createdAt: -1 })
    res.render('index', {
        title: 'homepage',
        blogs: data
    })
})

app.get('/blogs/create', (req, res) => {
    // res.end('hello world!')
    res.render('create', {
        title: 'create',
    })
})

app.post('/blogs', async (req, res) => {
    const data = await new Blog(req.body)

    try {
        data.save()
        res.redirect('/blogs')
    } catch (err) {
        console.log(err)
    }
})

app.get('/blog/:id', async (req, res) => {
    const id = req.params.id
    const data = await Blog.findById(id)

    try {
        res.render('details', {
            title: 'details',
            blog: data
        })
    } catch (err) {

    }
})

app.delete('/blog/:id', async (req, res) => {
    const id = req.params.id

    try {
        await Blog.findByIdAndDelete(id)
        res.json({ redirect: '/blogs' })
    } catch (err) {
        console.log(err)
    }
})

app.get('/blog/edit/:id', async (req, res) => {
    const id = req.params.id
    const data = await Blog.findById(id)

    res.render('edit', {
        title: 'edit',
        blog: data
    })
})

app.patch('/blog/:id', async (req, res) => {
    const id = req.params.id

    try {
        await Blog.findByIdAndUpdate(id, req.body)
        res.json({ redirect: '/blogs' })
    } catch (err) {
        console.log(err)
    }
})

app.use((req, res) => {
    res.status(404).render('404', {
        title: '404',
    })
})